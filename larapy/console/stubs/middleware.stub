"""
{{class_name}}

HTTP middleware for {{middleware_purpose}}.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', '..', 'package-larapy'))

from larapy.http.middleware.middleware import Middleware
from larapy.http.request import Request
from larapy.http.response import Response
from typing import Callable, Optional


class {{class_name}}(Middleware):
    """
    {{class_name}}
    
    Middleware for {{middleware_purpose_lower}}.
    """
    
    def __init__(self):
        """Initialize the middleware"""
        super().__init__()
    
    def handle(self, request: Request, next_middleware: Callable[[Request], Response]) -> Response:
        """
        Handle an incoming request
        
        Args:
            request: The incoming HTTP request
            next_middleware: The next middleware in the pipeline
            
        Returns:
            HTTP response
        """
        # Pre-processing logic goes here
        # Example: Check authentication, validate headers, log requests, etc.
        
        # Example: Check if user is authenticated
        # if not request.user or not request.user.is_authenticated:
        #     return Response({'error': 'Unauthorized'}, 401)
        
        # Example: Add custom headers
        # request.headers['X-Custom-Header'] = 'Custom Value'
        
        # Example: Log the request
        # self.log_request(request)
        
        # Call the next middleware in the pipeline
        response = next_middleware(request)
        
        # Post-processing logic goes here
        # Example: Modify response, add headers, log responses, etc.
        
        # Example: Add CORS headers
        # response.headers['Access-Control-Allow-Origin'] = '*'
        # response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        # response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
        
        # Example: Log the response
        # self.log_response(response)
        
        return response
    
    def terminate(self, request: Request, response: Response) -> None:
        """
        Perform any final actions for the request lifecycle
        
        Args:
            request: The HTTP request
            response: The HTTP response
        """
        # Cleanup logic goes here
        # Example: Close database connections, clear cache, etc.
        pass
    
    # Helper methods
    def log_request(self, request: Request) -> None:
        """Log the incoming request"""
        # Example logging implementation
        pass
    
    def log_response(self, response: Response) -> None:
        """Log the outgoing response"""
        # Example logging implementation
        pass